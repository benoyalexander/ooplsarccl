        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:
        -:   21:// ------------
        -:   22:// collatz_read
        -:   23:// ------------
        -:   24:
function _Z12collatz_readRKSs called 9 returned 100% blocks executed 80%
        9:   25:pair<int, int> collatz_read (const string& s) {
       18:   26:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -:   27:    int i;
        -:   28:    int j;
        9:   29:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       18:   30:    return make_pair(i, j);}
call    0 returned 100%
        -:   31:
        -:   32:// ------------
        -:   33:// cycle_length
        -:   34:// ------------
        -:   35:static const int MAX_SOL = 10000;
        -:   36:static int solution[MAX_SOL];
        -:   37:
function _Z12cycle_lengthi called 4916 returned 100% blocks executed 100%
     4916:   38:int cycle_length (int n) {
     4916:   39:  if (n == 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        8:   40:    return 1;
     4908:   41:  if (n < MAX_SOL && solution[n] != 0) {
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 15% (fallthrough)
branch  3 taken 85%
      661:   42:    return solution[n];
        -:   43:  }
        -:   44:
     4247:   45:  if ((n & 0x1) == 0)
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
     2681:   46:    n = (n / 2);
        -:   47:  else
     1566:   48:    n = (3 * n) + 1;
        -:   49:  
     4247:   50:  int slice = cycle_length(n);
call    0 returned 100%
        -:   51:
     4247:   52:  if (n < MAX_SOL) {
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3878:   53:    if (solution[n] == 0) {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
     3417:   54:      solution[n] = slice;
        -:   55:    }
        -:   56:  }
        -:   57:  
     4247:   58:  return 1 + slice;
        -:   59:}
        -:   60:
        -:   61:
        -:   62:// ------------
        -:   63:// collatz_eval
        -:   64:// ------------
        -:   65:
function _Z12collatz_evalii called 12 returned 100% blocks executed 100%
       12:   66:int collatz_eval (int i, int j) {
       12:   67:    if (i > j) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        4:   68:      int tmp = i;
        4:   69:      i = j;
        4:   70:      j = tmp;
        -:   71:    }
        -:   72:  
       12:   73:    int max = cycle_length(j);
call    0 returned 100%
        -:   74:
      666:   75:    for (int x = i; x < j; ++x) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
      654:   76:      int y = cycle_length(x);
call    0 returned 100%
      654:   77:      if ( y > max )
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       39:   78:	max = y;
        -:   79:    }
        -:   80:
       12:   81:    return max;}
        -:   82:
        -:   83:// -------------
        -:   84:// collatz_print
        -:   85:// -------------
        -:   86:
function _Z13collatz_printRSoiii called 9 returned 100% blocks executed 100%
        9:   87:void collatz_print (ostream& w, int i, int j, int v) {
        9:   88:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   89:
        -:   90:// -------------
        -:   91:// collatz_solve
        -:   92:// -------------
        -:   93:
function _Z13collatz_solveRSiRSo called 2 returned 100% blocks executed 82%
        2:   94:void collatz_solve (istream& r, ostream& w) {
        4:   95:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
    20002:   96:    for (int x=0; x < MAX_SOL; ++x)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    20000:   97:      solution[x] = 0;
       18:   98:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 80% (fallthrough)
branch  7 taken 20%
        8:   99:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  100:        const int            i = p.first;
        8:  101:        const int            j = p.second;
        8:  102:        const int            v = collatz_eval(i, j);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       13:  103:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
